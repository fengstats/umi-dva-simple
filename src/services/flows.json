[
  {
    "id": "20ded0321c640844",
    "type": "tab",
    "label": "Umi+Dva-mock接口",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "1a987564a48ed8b5",
    "type": "http in",
    "z": "20ded0321c640844",
    "name": "",
    "url": "/umidvaPro/users",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 180,
    "y": 160,
    "wires": [["8a62529b4198bdc7"]]
  },
  {
    "id": "8a62529b4198bdc7",
    "type": "function",
    "z": "20ded0321c640844",
    "name": "返回用户列表",
    "func": "/**\n * 请求参数\n * {number} current  当前页码: 默认1\n * {number} pageSize 每页返回条数: 默认10\n **/\nconst userList = flow.get('userList');\nconst params = msg.payload;\nlet { current = 1, pageSize = 10 } = params;\n// 转换成数值类型\ncurrent *= 1;\npageSize *= 1;\n\nnode.warn(`获取用户列表,请求参数: ${JSON.stringify(params)}`);\n\n// 只要没有被删除的用户就响应给前端就好啦\nconst renderList = userList.filter((item) => item.isDeleted !== 1);\n// 按照创建时间排序一下: 降序排列,升序 rev = 1\nconst rev = -1;\nconst key = 'createTime';\nconst allList = renderList.sort((a, b) =>\n  a[key] > b[key] ? rev * 1 : rev * -1,\n);\n// 获取全部条数\nconst total = allList.length;\n\n// 根据前端传入的参数分页查询数据\nconst startIndex = (current - 1) * pageSize;\n// slice() 包前不包后\nconst endIndex = pageSize * current;\nconst resultList = allList.slice(startIndex, endIndex);\n\nmsg.payload = {\n  code: 200,\n  data: resultList,\n  pagination: {\n    total,\n    pageSize,\n    current,\n  },\n};\n\n// node.warn('获取用户列表');\n// node.warn(msg.payload);\n\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 440,
    "y": 160,
    "wires": [["7f3a6f551ef96a08"]]
  },
  {
    "id": "7f3a6f551ef96a08",
    "type": "http response",
    "z": "20ded0321c640844",
    "name": "响应",
    "statusCode": "",
    "headers": {},
    "x": 630,
    "y": 160,
    "wires": []
  },
  {
    "id": "9ed1e701ba524a9a",
    "type": "function",
    "z": "20ded0321c640844",
    "name": "数据初始化",
    "func": "flow.set('userList', flow.get(\"userList\") || [])\nflow.set('id', flow.get('id') || 0)\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 330,
    "y": 100,
    "wires": [[]]
  },
  {
    "id": "4c634fbd5fa76714",
    "type": "inject",
    "z": "20ded0321c640844",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 160,
    "y": 100,
    "wires": [["9ed1e701ba524a9a"]]
  },
  {
    "id": "695efb236b6d2815",
    "type": "http in",
    "z": "20ded0321c640844",
    "name": "",
    "url": "/umidvaPro/users",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 180,
    "y": 200,
    "wires": [["b592a51e6817f73a"]]
  },
  {
    "id": "b592a51e6817f73a",
    "type": "function",
    "z": "20ded0321c640844",
    "name": "新增用户",
    "func": "// 获取全局控制id\nconst id = flow.get('id') + 1;\n// 获取用户列表信息\nconst userList = flow.get('userList');\nconst params = msg.payload;\nconst { name, createTime, email = '', status = 1 } = params;\n\nnode.warn(`新增单个用户,请求参数: ${JSON.stringify(params)}`);\n\n// 必填参数校验\nif (!name) {\n  msg.payload = {\n    code: 4001,\n    data: null,\n    msg: '名称为必传参数，请检查！',\n  };\n  return msg;\n}\n\n// UTC时区需要+8小时才能与北京时间相等\n// +new Date() + 1000 * 60 * 60 * 8\nconst curTime = new Date().toISOString();\n// 新增操作\nuserList.push({\n  id,\n  name,\n  email,\n  status,\n  // 软删除标记\n  isDeleted: 0,\n  createTime: createTime ? createTime : curTime,\n  updateTime: curTime,\n});\n\n// 全局id++\nflow.set('id', id);\nmsg.payload = {\n  code: 200,\n  data: { id },\n  msg: '新增用户成功',\n};\n\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 200,
    "wires": [["a40991db6f15e615"]]
  },
  {
    "id": "bcfe7853e0a0469d",
    "type": "http response",
    "z": "20ded0321c640844",
    "name": "响应",
    "statusCode": "",
    "headers": {},
    "x": 750,
    "y": 200,
    "wires": []
  },
  {
    "id": "107d8f4130f33d37",
    "type": "http in",
    "z": "20ded0321c640844",
    "name": "",
    "url": "/umidvaPro/users/:id",
    "method": "put",
    "upload": false,
    "swaggerDoc": "",
    "x": 190,
    "y": 240,
    "wires": [["ee34bee503db2e4d"]]
  },
  {
    "id": "ee34bee503db2e4d",
    "type": "function",
    "z": "20ded0321c640844",
    "name": "编辑用户",
    "func": "// 获取用户列表信息\nconst userList = flow.get('userList');\nconst params = msg.payload;\n// 转换一下,可能变成了字符串\nconst id = parseInt(msg.req.params.id);\nconst { name, createTime, email = '', status = 1 } = params;\n\nnode.warn(`编辑用户,id: ${id} 请求参数: ${JSON.stringify(params)}`);\n\nmsg.payload = {\n  code: 4001,\n  data: null,\n  msg: 'ID与名称为必传参数，请检查参数传递！',\n};\n// 必填参数校验\nif (!id || !name) {\n  return msg;\n}\n\n// 查找用户\nconst user = userList.find((item) => item.id === id);\nif (!user) {\n  msg.payload.msg = `用户id：${id} 该用户不存在！`;\n  return msg;\n}\n\n// 编辑操作\n// +new Date() + 1000 * 60 * 60 * 8\nconst curTime = new Date().toISOString();\nuser.name = name;\nuser.email = email;\nuser.status = status;\nuser.createTime = createTime ? createTime : user.createTime;\nuser.updateTime = curTime;\n\nmsg.payload = {\n  code: 200,\n  data: user,\n  msg: '编辑用户成功',\n};\n\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 240,
    "wires": [["0671c6d0e6f7736c"]]
  },
  {
    "id": "0671c6d0e6f7736c",
    "type": "http response",
    "z": "20ded0321c640844",
    "name": "响应",
    "statusCode": "",
    "headers": {},
    "x": 630,
    "y": 240,
    "wires": []
  },
  {
    "id": "1b3086d7647f0be1",
    "type": "http in",
    "z": "20ded0321c640844",
    "name": "",
    "url": "/umidvaPro/users/:id",
    "method": "delete",
    "upload": false,
    "swaggerDoc": "",
    "x": 200,
    "y": 280,
    "wires": [["fab1c85317655592"]]
  },
  {
    "id": "fab1c85317655592",
    "type": "function",
    "z": "20ded0321c640844",
    "name": "删除用户",
    "func": "// 获取用户列表信息\nconst userList = flow.get('userList');\nconst params = msg.payload;\n// 转换一下,可能变成了字符串\nconst id = parseInt(msg.req.params.id);\n\nnode.warn(`删除用户,id: ${id} 请求参数: ${JSON.stringify(params)}`);\n\nmsg.payload = {\n  code: 4001,\n  data: null,\n  msg: 'ID为必传参数，请检查参数传递！',\n};\n// 必填参数校验\nif (!id) {\n  return msg;\n}\n\n// 查找用户\nconst user = userList.find((item) => item.id === id);\nif (!user) {\n  msg.payload.msg = `用户id：${id} 该用户不存在！`;\n  return msg;\n}\n\n// 编辑操作\n// +new Date() + 1000 * 60 * 60 * 8\nconst curTime = new Date().toISOString();\nuser.isDeleted = 1;\nuser.updateTime = curTime;\n\nmsg.payload = {\n  code: 200,\n  data: { id },\n  msg: '删除用户成功',\n};\n\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 280,
    "wires": [["bf90906eb3bdbf00"]]
  },
  {
    "id": "bf90906eb3bdbf00",
    "type": "http response",
    "z": "20ded0321c640844",
    "name": "响应",
    "statusCode": "",
    "headers": {},
    "x": 630,
    "y": 280,
    "wires": []
  },
  {
    "id": "ab87a891553ad5a8",
    "type": "inject",
    "z": "20ded0321c640844",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 520,
    "wires": [["8b3119421adaad04"]]
  },
  {
    "id": "8b3119421adaad04",
    "type": "http request",
    "z": "20ded0321c640844",
    "name": "查询用户列表",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:1880/umidvaPro/users",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 340,
    "y": 520,
    "wires": [["0830089f44433f79"]]
  },
  {
    "id": "0830089f44433f79",
    "type": "debug",
    "z": "20ded0321c640844",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 520,
    "wires": []
  },
  {
    "id": "748984b8237d495b",
    "type": "inject",
    "z": "20ded0321c640844",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 560,
    "wires": [["c4d51caeff95ee53"]]
  },
  {
    "id": "c4d51caeff95ee53",
    "type": "function",
    "z": "20ded0321c640844",
    "name": "",
    "func": "node.warn(new Date().toISOString())\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 310,
    "y": 560,
    "wires": [[]]
  },
  {
    "id": "40ca4afca26a7879",
    "type": "http request",
    "z": "20ded0321c640844",
    "name": "删除用户",
    "method": "DELETE",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:1880/umidvaPro/users/1",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 320,
    "y": 480,
    "wires": [["2cdcc0dc6b1f4d14"]]
  },
  {
    "id": "5ce3a49d10fa4910",
    "type": "inject",
    "z": "20ded0321c640844",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 480,
    "wires": [["40ca4afca26a7879"]]
  },
  {
    "id": "2cdcc0dc6b1f4d14",
    "type": "debug",
    "z": "20ded0321c640844",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 480,
    "wires": []
  },
  {
    "id": "a40991db6f15e615",
    "type": "delay",
    "z": "20ded0321c640844",
    "name": "延时-loading",
    "pauseType": "delay",
    "timeout": "0.5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 590,
    "y": 200,
    "wires": [["bcfe7853e0a0469d"]]
  }
]
